# -*- coding: utf-8 -*-
"""AI_9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGEOz2Q_v11EkAlBHxvrZkaieW91jqj_
"""

from collections import deque

def pour_water_bfs(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque([(0, 0, [])])
    while queue:
        jug1_amount, jug2_amount, steps = queue.popleft()
        if (jug1_amount, jug2_amount) in visited:
            continue
        visited.add((jug1_amount, jug2_amount))
        if jug1_amount == target or jug2_amount == target:
            return steps
        queue.append((jug1_capacity, jug2_amount, steps + [(jug1_capacity, jug2_amount)]))
        queue.append((jug1_amount, jug2_capacity, steps + [(jug1_amount, jug2_capacity)]))

        queue.append((0, jug2_amount, steps + [(0, jug2_amount)]))
        queue.append((jug1_amount, 0, steps + [(jug1_amount, 0)]))
        amount = min(jug1_amount, jug2_capacity - jug2_amount)
        queue.append((jug1_amount - amount, jug2_amount + amount, steps + [(jug1_amount - amount, jug2_amount + amount)]))
        amount = min(jug2_amount, jug1_capacity - jug1_amount)
        queue.append((jug1_amount + amount, jug2_amount - amount, steps + [(jug1_amount + amount, jug2_amount - amount)]))
    return None

def pour_water_recursive(jug1_capacity, jug2_capacity, jug1_amount, jug2_amount, target, visited=None, steps=None):
    if visited is None:
        visited = set()
    if steps is None:
        steps = []

    if jug1_amount == target or jug2_amount == target:
        return steps

    if (jug1_amount, jug2_amount) in visited:
        return None

    visited.add((jug1_amount, jug2_amount))

    steps1 = pour_water_recursive(jug1_capacity, jug2_capacity, jug1_capacity, jug2_amount, target, visited, steps + [(jug1_capacity, jug2_amount)])
    if steps1:
        return steps1
    steps2 = pour_water_recursive(jug1_capacity, jug2_capacity, jug1_amount, jug2_capacity, target, visited, steps + [(jug1_amount, jug2_capacity)])
    if steps2:
        return steps2
    steps3 = pour_water_recursive(jug1_capacity, jug2_capacity, 0, jug2_amount, target, visited, steps + [(0, jug2_amount)])
    if steps3:
        return steps3

    steps4 = pour_water_recursive(jug1_capacity, jug2_capacity, jug1_amount, 0, target, visited, steps + [(jug1_amount, 0)])
    if steps4:
        return steps4
    amount = min(jug1_amount, jug2_capacity - jug2_amount)
    steps5 = pour_water_recursive(jug1_capacity, jug2_capacity, jug1_amount - amount, jug2_amount + amount, target, visited, steps + [(jug1_amount - amount, jug2_amount + amount)])
    if steps5:
        return steps5

    #from jug2 to jug1
    amount = min(jug2_amount, jug1_capacity - jug1_amount)
    steps6 = pour_water_recursive(jug1_capacity, jug2_capacity, jug1_amount + amount, jug2_amount - amount, target, visited, steps + [(jug1_amount + amount, jug2_amount - amount)])
    if steps6:
        return steps6

    return None

def main():
    jug1_capacity = 3
    jug2_capacity = 5
    target = 4

    print("BFS:")
    steps_bfs = pour_water_bfs(jug1_capacity, jug2_capacity, target)
    if steps_bfs:
        print(f"Steps: {steps_bfs}")
    else:
        print("Goal state not reachable.")

    print("\nRecursion Method:")
    steps_recursive = pour_water_recursive(jug1_capacity, jug2_capacity, 0, 0, target)
    if steps_recursive:
        print(f"Steps: {steps_recursive}")
    else:
        print("Goal state not reachable.")

if __name__ == "__main__":
    main()